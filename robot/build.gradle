import edu.wpi.first.gradlerio.GradleRIOPlugin

plugins {
    id("java")
    id("edu.wpi.first.GradleRIO").version("2024.1.1-beta-3")
    id("org.jetbrains.kotlin.jvm").version("1.9.20")
    id("com.peterabeles.gversion").version("1.10")

    id("com.google.devtools.ksp")
}

def javaVersion = JavaVersion.VERSION_17

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

def ROBOT_MAIN_CLASS = "org.team9432.Main"


deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            team = project.frc.getTeamOrDefault(9432)
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {}

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

repositories {
    maven {
        url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
        credentials {
            username = "Mechanical-Advantage-Bot"
            password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
        }
    }
}

configurations.configureEach {
    exclude(group: "edu.wpi.first.wpilibj")
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

dependencies {
    implementation implementation(project(':annotation',))
    ksp ksp(project(':annotation',))
    wpi.java.deps.wpilib().forEach { implementation(it) }
    wpi.java.vendor.java().forEach { implementation(it) }

    wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio).forEach { roborioDebug(it) }
    wpi.java.vendor.jniDebug(wpi.platforms.roborio).forEach { roborioDebug(it) }

    wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio).forEach { roborioRelease(it) }
    wpi.java.vendor.jniRelease(wpi.platforms.roborio).forEach { roborioRelease(it) }

    wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop).forEach { nativeDebug(it) }
    wpi.java.vendor.jniDebug(wpi.platforms.desktop).forEach { nativeDebug(it) }
    wpi.sim.enableDebug().forEach { simulationDebug(it) }

    wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop).forEach { nativeRelease(it) }
    wpi.java.vendor.jniRelease(wpi.platforms.desktop).forEach { nativeRelease(it) }

    wpi.sim.enableRelease().forEach { simulationRelease(it) }

}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = false
wpi.sim.addDriverstation().defaultEnabled = true

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}


project.compileJava.dependsOn(createVersionFile)
gversion {
    srcDir = "src/main/kotlin/"
    classPackage = "org.team9432"
    className = "BuildConstants"
    dateFormat = "yyyy-MM-dd HH:mm:ss z"
    timeZone = "America/Phoenix"
    indent = "  "
}